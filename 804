#include <iostream>
#include <queue>
using namespace std;

struct BstNode
{
    int data;
    BstNode* left;
    BstNode* right;
};

BstNode *LIST(BstNode *root);
BstNode *Insert(BstNode *root,int a); //ok
BstNode *Search(BstNode *root,int a);//ok
BstNode* PRINT(BstNode* root);
BstNode *Delete(BstNode *root,int a);
BstNode *NewNode(int a);//ok
BstNode *MIN(BstNode *root);
BstNode*temp=NULL;


int main()
{
    BstNode *root=NULL;
    LIST(root);
    return 0;
}


BstNode *LIST(BstNode *root)
{

    int sel;
    while(1)
    {

        cout<<"1.Insert   2.Delete   3.Search    4.Show   5.end:";
        cin>>sel;

        switch(sel)
        {
        case 1:
            int InsNum;
            cout<<"Enter the number which you want to insert:";
            cin>>InsNum;
            root=Insert(root,InsNum);
            break;
        case 2:
            int DelNum;
            cout<<"Enter the number which you want to Delete:";
            cin>>DelNum;
            root=Delete(root,DelNum);
            break;
        case 3:
            int SeaNum;
            BstNode *Seroot,*R,*L,*SR,*SL;
            cout<<"Enter the number which you want to Search:";
            cin>>SeaNum;
            Seroot=Search(root,SeaNum);
            if(Seroot!=NULL)
            {
                R=Seroot->right;
                L=Seroot->left;
                if(SeaNum<=Seroot->data)
                {
                    SR=L->right;
                    SL=L->left;
                    cout << "找到:" << L->data << endl;
                    cout<<"parent:"<<Seroot->data<<endl;
                    if(L->left!=NULL)
                        cout<<"左子為:"<<SL->data<<endl;
                    if(L->right!=NULL)
                        cout<<"右子為:"<<SR->data<<endl;
                }
                else
                {
                    SL=R->left;
                    SR=R->right;
                    cout << "找到:" << R->data << endl;
                    cout<<"parent:"<<Seroot->data<<endl;
                    if(R->left!=NULL)
                        cout<<"左子為:"<<SL->data<<endl;
                    if(R->right!=NULL)
                        cout<<"右子為:"<<SR->data<<endl;
                }
            }
            break;
        case 4:
            cout<<"BST:";
            PRINT(root);
            cout<<endl;
            break;
        case 5:
            return 0 ;
            break;
        }
    }
}

BstNode *NewNode(int a)
{
    BstNode *Newroot=new BstNode;
    Newroot->data=a;
    Newroot->left=NULL;
    Newroot->right=NULL;
    return Newroot;
}

BstNode *Insert(BstNode *root,int a)
{

    if(root==NULL)
    {
        root=NewNode(a);
    }
    else if(a <= root->data)
    {
        root->left=Insert(root->left,a);
    }
    else
    {
        root->right=Insert(root->right,a);
    }
    return root;
}


BstNode *Search(BstNode *root,int a)
{

    if(root==NULL)
    {
        cout<<"沒東西"<<endl;
        return root;
    }
    else if(root->data==a)     //搜尋到了丟回去
    {
        return temp;
    }
    else if(a <= root->data)     //小的搜尋左邊
    {
        temp=root;
        Search(root->left,a);
    }
    else       //大的搜尋右邊
    {
        temp=root;
        Search(root->right,a);
    }
}


BstNode *Delete(BstNode *root,int a)
{
    if (root == NULL)
        return root;
    else if(a<root->data)
        root->left=Delete(root->left,a);
    else if(a>root->data)
        root->right=Delete(root->right,a);
    else
    {
        if(root->left==NULL && root->right==NULL)
        {
            delete root;
            root=NULL;
        }
        else if(root->left==NULL)
        {
            root=root->right;
        }
        else if(root->right==NULL)
        {
            root=root->left;
        }
        else
        {
            BstNode* temp1 = MIN(root->right);
            root->data = temp1->data;
            root->right = Delete(root->right, temp1->data);

        }
    }
    return root;
}

BstNode *MIN(BstNode *root)
{
    while(root->left!=NULL)
        root=root->left;
    return root;
}

BstNode* PRINT(BstNode* root)
{
    if (root == NULL)
        return root;
    queue<BstNode*> Q;
    Q.push(root);
    //while there is at least one discovered node
    while (!Q.empty())
    {
        BstNode* current = Q.front();
        cout << current->data << " ";
        Q.pop(); // 釋放空間
        if (current->left != NULL)
            Q.push(current->left);
        if (current->right != NULL)
            Q.push(current->right);


    }
}
