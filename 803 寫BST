#include <iostream>
#include <queue>
using namespace std;

struct BstNode {
    int data;
    BstNode* left;
    BstNode* right;
};
BstNode* Delete(BstNode* root, int data);
BstNode* Insert(BstNode* root, int number);
BstNode* Search(BstNode* root, int number);
BstNode* NewNode(int data);
BstNode* PRINT(BstNode* root);
BstNode* Min(BstNode* root);

//BstNode* Delete(BstNode* root,int number);
int h;
BstNode* temp = NULL;
int main()
{
    BstNode* root = NULL;
    int sel;
    while (1) {
        cout << "=========================" << endl;
        cout << "1.add 2.delete 3.search:";
        cin >> sel;
        switch (sel) {
            int number;
        case 1:
            cout << "Enter your number:";
            cin >> number;
            root = Insert(root, number);
            break;
        case 2:
            int k;
            cout << "Enter your number:";
            cin >> k;
            root = Delete(root, k);
            break;
        case 3:
            BstNode *SunL, *SunR, *L, *R;
            int N;
            cout << "Enter the number you want to search:";
            cin >> N;
            root = Search(root, N); //parent

            if (root != NULL) {
                R = root->right;
                L = root->left;
                if (N <= root->data) {
                    SunL = L->left;
                    SunR = L->right;
                    cout << "找到:" << L->data << endl;
                    cout << "parent:" << root->data << endl;
                    if (SunR != NULL)
                        cout << "右邊:" << SunR->data << endl;
                    if (SunL != NULL)
                        cout << "左邊:" << SunL->data << endl;
                }
                else {
                    SunL = R->left;
                    SunR = R->right;
                    cout << "找到:" << R->data << endl;
                    cout << "parent:" << root->data << endl;
                    if (SunR != NULL)
                        cout << "右邊:" << SunR->data << endl;
                    if (SunL != NULL)
                        cout << "左邊:" << SunL->data << endl;
                }
            }
            break;
        case 4:
            PRINT(root);
            cout << endl;
            break;
        }
    }
}

BstNode* GetNewNode(int data)
{
    BstNode* newNode = new BstNode();
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

BstNode* Insert(BstNode* root, int data)
{
    if (root == NULL) {
        root = GetNewNode(data);
    }
    else if (data <= root->data) {
        root->left = Insert(root->left, data);
    }
    else {
        root->right = Insert(root->right, data);
    }
    return root;
}

BstNode* Search(BstNode* root, int data)
{
    if (root == NULL) {
        cout << "沒找到" << endl;
        return root;
    }
    else if (root->data == data) {
        return temp;
    }
    else if (data <= root->data) { //小於往左邊
        temp = root; //拿來存PARENT
        Search(root->left, data);
    }
    else { //大於往右邊
        temp = root; //拿來存PARENT
        Search(root->right, data);
    }
}

BstNode* Delete(BstNode* root, int data)
{
    if (root == NULL)
        return root;
    else if (data < root->data)
        root->left = Delete(root->left, data); //找小於
    else if (data > root->data)
        root->right = Delete(root->right, data); //找大於
    else { //等於

        if (root->left == NULL && root->right == NULL) { // No child兩邊空
            delete root;
            root = NULL; //指到底
        }
        else if (root->left == NULL) { //One child 左空  往右邊找
            //			 BstNode *temp = root;
            root = root->right;
            //			delete temp;
        }
        else if (root->right == NULL) { //右空 往左邊找
            //			 BstNode *temp = root;
            root = root->left;
            //			delete temp;
        }
        else { //2 children
            BstNode* temp1 = Min(root->right);
            root->data = temp1->data;
            root->right = Delete(root->right, temp1->data);
        }
    }
    return root;
}

BstNode* Min(BstNode* root)
{
    while (root->left != NULL)
        root = root->left;
    return root;
}

BstNode* PRINT(BstNode* root)
{
    if (root == NULL)
        return root;
    queue<BstNode*> Q;
    Q.push(root);
    //while there is at least one discovered node
    while (!Q.empty()) {
        BstNode* current = Q.front();
        Q.pop(); // 釋放空間
        cout << current->data << " ";
        if (current->left != NULL)
            Q.push(current->left);
        if (current->right != NULL)
            Q.push(current->right);
    }
}
